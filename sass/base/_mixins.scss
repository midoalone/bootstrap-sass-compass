//
// Mixins
// --------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix {
	*zoom: 1;
	&:before,
	&:after {
		display: table;
		content: "";
		// Fixes Opera/contenteditable bug:
		// http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
	// Default
	outline: thin dotted #333;
	// Webkit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
	*display: inline; /* IE7 inline-block hack */
	*zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
	*margin-left: .3em;

	&:first-child {
		*margin-left: 0;
	}
}

@mixin ie7-restore-right-whitespace() {
	*margin-right: .3em;
}

// Sizing shortcuts
// -------------------------
@mixin size($height, $width) {
	width: $width;
	height: $height;
}
@mixin square($size) {
	@include size($size, $size);
}

// Placeholder text
// -------------------------
@mixin placeholder($color: $placeholderText) {
	&:-moz-placeholder {
		color: $color;
	}
	&:-ms-input-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin hide-text {
	font: 0/0 a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

// FONTS
// --------------------------------------------------
@mixin font-shorthand($weight: normal, $size: 14px, $lineHeight: 20px, $family: false) {
	font-size: $size;
	font-weight: $weight;
	line-height: $lineHeight;
	@if $family == serif {
		font-family: $serifFontFamily;
	} @else if $family == sans-serif {
		font-family: $sansSerifFontFamily;
	} @else if $family == monospace {
		font-family: $monoFontFamily;
	}
}


// FORMS
// --------------------------------------------------

// Block level inputs
@mixin input-block-level {
	display: block;
	width: 100%;
	min-height: $inputHeight; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
	@include box-sizing(border-box); // Makes inputs behave like true block-level elements
}



// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
	// Set the text color
	> label,
	.help-block,
	.help-inline {
		color: $textColor;
	}
	// Style inputs accordingly
	.checkbox,
	.radio,
	input,
	select,
	textarea {
		color: $textColor;
	}
	input,
	select,
	textarea {
		border-color: $borderColor;
		@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
		&:focus {
			border-color: darken($borderColor, 10%);
			@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($borderColor, 20%));
		}
	}
	// Give a small background color for input-prepend/-append
	.input-prepend .add-on,
	.input-append .add-on {
		color: $textColor;
		background-color: $backgroundColor;
		border-color: $textColor;
	}
}

// User select
// For selecting text on the page
@mixin user-select($select) {
	$select: unquote($select);
	@include experimental(user-select, $select,
		-moz, -webkit, not -o, not -ms, -khtml, official
	);
}

// Resize anything
@mixin resizable($direction) {
	resize: $direction; // Options: horizontal, vertical, both
	overflow: auto; // Safari fix
}

// CSS3 Content Columns
@mixin content-columns($columnCount, $columnGap: $gridGutterWidth) {
	@include column-count($columnCount);
	@include column-gap($columnGap);
}

// BACKGROUNDS
// --------------------------------------------------

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
@mixin translucent-background($color: $white, $alpha: 1) {
	background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

@mixin translucent-border($color, $white, $alpha : 1){
	border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
	@include background-clip(padding-box);
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor, $textColor: $white, $textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
	color: $textColor;
	@include text-shadow($textShadow);
	@include gradient-vertical($primaryColor, $secondaryColor);
	border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
	border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fadein(rgba(0,0,0,.1), 15%);
}

// Gradients
@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
	background-color: $endColor;
	@include background-image(linear-gradient(left, $startColor, $endColor) );
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=1); // IE9 and down
	background-repeat: repeat-x;
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
	background-color: mix($startColor, $endColor, 60%);
	@include background-image( linear-gradient(top, $startColor, $endColor) ); // The standard
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0); // IE9 and down
	background-repeat: repeat-x;
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
	background-color: $endColor;
	@include background-image( linear-gradient($deg, $startColor, $endColor) ); // The standard
	background-repeat: repeat-x;
}
@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
	background-color: mix($midColor, $endColor, 80%);
	@include background-image( linear-gradient($startColor, $midColor $colorStop, $endColor) );
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
	background-repeat: no-repeat;
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333)  {
	background-color: $outerColor;
	@include background-image(radial-gradient(circle, $innerColor, $outerColor));
	background-repeat: no-repeat;
}
@mixin gradient-striped($color, $angle: 45deg) {
	background-color: $color;
	@include background-image(linear-gradient($angle, rgba(255,255,255,.15) 25%, rgba(255,255,255,0) 25%, rgba(255,255,255,0) 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, rgba(255,255,255,0) 75%, rgba(255,255,255,0)));
}

// Reset filters for IE
@mixin reset-filter() {
	filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}



// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin nav-divider($top: #e5e5e5, $bottom: $white) {
	// IE7 needs a set width since we gave a height. Restricting just
	// to IE7 to keep the 1px left/right space in other browsers.
	// It is unclear where IE is getting the extra space that we need
	// to negative-margin away, but so it goes.
	*width: 100%;
	height: 1px;
	margin: (($baseLineHeight / 2) - 1) 1px; // 8px 1px
	*margin: -5px 0 5px;
	overflow: hidden;
	background-color: $top;
	border-bottom: 1px solid $bottom;
}

// Button backgrounds
// ------------------
@mixin buttonBackground($startColor, $endColor, $textColor: #fff, $textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
	// gradientBar will set the background to a pleasing blend of these, to support IE<=9
	@include gradientBar($startColor, $endColor, $textColor, $textShadow);
	*background-color: $endColor; /* Darken IE7 buttons by default so they stand out more given they won't have borders */
	@include reset-filter();

	// in these cases the gradient won't cover the background, so we override
	&:hover, &:active, &.active, &.disabled, &[disabled] {
		color: $textColor;
		background-color: $endColor;
		*background-color: darken($endColor, 5%);
	}

	// IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
	&:active,
	&.active {
		background-color: darken($endColor, 10%);
	}
}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
@mixin navbarVerticalAlign($elementHeight) {
	margin-top: ($navbarHeight - $elementHeight) / 2;
}



// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
	margin-right: auto;
	margin-left: auto;
	@include clearfix();
}

@mixin gridSystem(
		$type: fixed, // fixed | fluid | input | table
		$columns: $gridColumns, 
		$columnWidth: if($type == fluid, $fluidGridColumnWidth, $gridColumnWidth), 
		$gutterWidth: if($type == fluid, $fluidGridGutterWidth, $gridGutterWidth),
		$rowWidth: ($columns * $columnWidth) + ($gutterWidth * ($columns - 1))
	){
	@if $type == fixed {
		.row {
			margin-left: $gutterWidth * -1;
			@include clearfix;
		}
		[class*="span"] {
			float: left;
			min-height: 1px;
			margin-left: $gutterWidth;
		}
		@for $i from 1 through $columns {
			@if $i == $columns {
				.span#{$i}, .container, 
				.navbar-static-top .container, 
				.navbar-fixed-top .container, 
				.navbar-fixed-bottom .container { 
					width: ($columnWidth * $i) + ($gutterWidth * ($i - 1)); 
				}
			} @else {
				.span#{$i} { width: ($columnWidth * $i) + ($gutterWidth * ($i - 1)); }
			}
		}
		@for $i from 1 through $columns {
			@if $i != $columns {
				.offset#{$i} { margin-left: ($columnWidth * $i) + ($gutterWidth * ($i - 1)) + ($gutterWidth * 2); }
			}
		}
	} @else if $type == fluid {
		.row-fluid {
			width: 100%;
			@include clearfix;
			[class*="span"] {
				display:block;
				float: left;
				width:100%;
				margin-left: $gutterWidth;
				*margin-left: $gutterWidth - (.5 / $rowWidth * 100 * 1%);
				@include box-sizing(border-box);
				min-height:30px;
				&:first-child {
					margin-left: 0;
				}
			}
			@for $i from 1 through $columns {
				.span#{$i} { 
					width: ($columnWidth * $i) + ($gutterWidth * ($i - 1)); 
      					*width: ($columnWidth * $i) + ($gutterWidth * ($i - 1)) - (.5 / $rowWidth * 100 * 1%);
				}
			}
			@for $i from 1 through $columns {
				@if $i != $columns {
					.offset#{$i} { 
						margin-left: ($columnWidth * $i) + ($gutterWidth * ($i - 1)) + ($gutterWidth * 2); 
						*margin-left: ($columnWidth * $i) + ($gutterWidth * ($i - 1)) - (.5/ $rowWidth * 100 * 1%) + ($gutterWidth*2) - (.5 / $columnWidth * 100 * 1%);
						&:first-child { 
							margin-left: ($columnWidth * $i) + ($gutterWidth * ($i - 1)) + ($gutterWidth);  
							*margin-left: ($columnWidth * $i) + ($gutterWidth * ($i - 1)) - (.5 / $rowWidth * 100 * 1%) + ($gutterWidth) - (.5 / $columnWidth * 100 * 1%);
						}
					}
				}
			}
		}
	} @else if $type == input {
		input,textarea,.uneditable-input {
			@for $i from 1 through $columns {
				&.span#{$i} { width: (($columnWidth) * $i) + ($gutterWidth * ($i - 1)) - 14; }
			}
		}
		.controls-row [class*="span"] + [class*="span"] {
			margin-left: $gutterWidth;	
		}
	} @else if $type == table {
		table {
			@for $i from 1 through $columns {
				.span#{$i} {
					float: none;
					width: (($columnWidth) * $i) + ($gutterWidth * ($i - 1)) - 16;
					margin-left: 0;
				}
			}
		}
	}
}

@mixin animate($name: fadeIn, $duration: 1s, $delay: .2s, $function: ease, $mode: both) {
	@include experimental(animation, $name $duration );
}